// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int       @id @default(autoincrement())
  productCode     String    @unique
  name            String
  description     String
  category        String
  imageUrl        String
  isCustomInquiry Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  variants        Variant[]

  @@index([category])
}

model Variant {
  id         Int         @id @default(autoincrement())
  sku        String      @unique
  size       String
  basePrice  Float
  productId  Int
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@index([productId])
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  companyName String?
  
  // Default delivery address
  address   String?
  city      String?
  state     String?
  pincode   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  
  @@index([email])
}

model QuoteRequest {
  id                 Int      @id @default(autoincrement())
  fullName           String
  companyName        String
  phone              String
  email              String?
  additionalComments String?
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  items              QuoteRequestItem[]
}

model QuoteRequestItem {
  id            Int          @id @default(autoincrement())
  quoteRequestId Int
  quoteRequest  QuoteRequest @relation(fields: [quoteRequestId], references: [id], onDelete: Cascade)
  productType   String
  dimensions    String?
  quantity      String
  notes         String?
  createdAt     DateTime     @default(now())

  @@index([quoteRequestId])
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique
  
  // Link to customer account (null for guest orders)
  customerId      Int?
  customer        Customer?   @relation(fields: [customerId], references: [id])
  
  customerName    String
  customerEmail   String
  customerPhone   String
  companyName     String?
  
  deliveryAddress String?
  deliveryCity    String?
  deliveryState   String?
  deliveryPincode String?
  
  status          OrderStatus @default(PENDING)
  subtotal        Float
  discount        Float       @default(0)
  deliveryCharge  Float       @default(0)
  totalAmount     Float
  
  notes           String?
  adminNotes      String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  confirmedAt     DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  items           OrderItem[]
  
  @@index([orderNumber])
  @@index([customerEmail])
  @@index([status])
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  variantId   Int
  variant     Variant  @relation(fields: [variantId], references: [id])
  
  productName String
  variantSize String
  quantity    Int
  unitPrice   Float
  discount    Float    @default(0)
  totalPrice  Float
  
  createdAt   DateTime @default(now())
  
  @@index([orderId])
  @@index([variantId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY_TO_SHIP
  SHIPPED
  DELIVERED
  CANCELLED
}
